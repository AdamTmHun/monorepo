import { compileMessage } from "./compileMessage.js"
import dedent from "dedent"
import type { CompileFunction } from "../cli/types.js"

/**
 * Heads up for developers that a file is automatically generated.
 */
const thisIsACompiledFileComment = dedent`
/**
 * !This file is automatically generated by the inlang paraglide-js compiler!
 */
`

/**
 * Compiles an inlang project into the importable paraglide-js library.
 */
export const compile: CompileFunction = (args) => {
	const compiledMessages = args.messages.map(compileMessage).join("\n\n")

	return {
		// for unknown reasons, typescript needs dedicated .d.ts files and
		// the d.ts files cannot shadow the js files. Hence, the _ prefix.
		"runtime$.d.ts": `export * from "./runtime.js"`,
		"messages$.d.ts": `export * from "./messages.js"`,
		"messages.js": dedent`
${thisIsACompiledFileComment}

import { languageTag } from "./runtime.js"

${compiledMessages}
`,
		"runtime.js": dedent`
${thisIsACompiledFileComment}

/**
 * Callback function that is called whenever the language tag changes.
 * 
 * @type {((tag: typeof availableLanguageTags[number]) => void) | undefined}
 */ 
let _onChangeLanguageTag

/**
 * The project's source language tag.
 */
export const sourceLanguageTag = "${args.settings.sourceLanguageTag}"

/**
 * The project's language tags.
 */
export const availableLanguageTags = /** @type {const} */ (${JSON.stringify(
			args.settings.languageTags
		)})

/**
 * The current language tag.
 * 
 * @type {typeof availableLanguageTags[number]}
 */
export let languageTag = sourceLanguageTag

/**
 * Change the language tag.
 *
 * @param {typeof availableLanguageTags[number]} tag
 */
export const changeLanguageTag = (tag) => {
	languageTag = tag
	if (_onChangeLanguageTag !== undefined) {
		_onChangeLanguageTag(tag)
	}
}

/**
 * Set the \`onChangeLanguageTag()\` callback function.
 *
 * The callback function is called whenever the language tag changes
 * and is typically used to update the UI.
 * 
 * @example
 *   onChangeLanguageTag((tag) => {
 *     // make a new request to the server with the updated language tag
 *     window.location.href = \`/\${tag}/\${window.location.pathname}\`
 *   })
 *
 * @param {(tag: typeof availableLanguageTags[number]) => void} fn
 */
export const onChangeLanguageTag = (fn) => {
	if (_onChangeLanguageTag !== undefined) {
		throw new Error("@inlang/paraglide-js: The \`onChangeLanguageTag()\` callback has already been called.\\n\\nThe \`onChangeLanguageTag()\` callback can only be called once to avoid unexpected behavior. Try searching for \`onChangeLanguageTag()\` in your codebase and remove the duplicate.")
	}
	_onChangeLanguageTag = fn
}
`,
	}
}
