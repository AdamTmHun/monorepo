import fs from "node:fs/promises"

async function main() {
	const registry = JSON.parse(await fs.readFile("./registry.json", "utf-8"))
	/** @type {import("./src/schema.js").MarketplaceItem[]} */
	const items = [...registry.apps]

	for (let pkg of registry.packages) {
		// ToDo: Activate after plugin registry is live
		// if (package.includes("jsdelivr") === false) {
		// 	throw new Error(
		// 		`Package ${package} is not hosted on jsdelivr. Please host it there and update the registry.json file.`,
		// 	)
		// }
		items.push(...(await getMarketplaceItems(pkg)))
	}

	await fs.writeFile(
		"./src/registry.ts",
		`//! Do not edit this file manually. It is automatically generated based on the contents of the registry.json file.

		export const registry = ${JSON.stringify(items, undefined, "\t")}`,
	)
}

await main()

// ToDo: Move to new install app
// /**
//  * @param {string} path
//  * @returns {string}
//  */
// function getLatestVersion(pkg) {
// 	return (
// 		pkg.slice(0, pkg.lastIndexOf("@")) +
// 		"@latest" +
// 		pkg.slice(pkg.indexOf("/", pkg.lastIndexOf("@")))
// 	)
// }

/**
 * @param {string} pkg
 * @returns {Promise<import("./src/schema.js").MarketplaceItem[]>}
 */
async function getMarketplaceItems(pkg) {
	const result = []

	const inlangPackage = await import(pkg)

	const exportedItems = [
		...(inlangPackage.default.plugins ?? []),
		...(inlangPackage.default.lintRules ?? []),
	]

	for (const item of exportedItems) {
		if (item.meta.marketplace === undefined) {
			throw new Error(
				`Package ${item.meta.id} has no marketplace metadata. Remove it from the registry.`,
			)
		}

		// Create a new object that matches the structure of MarketplaceItem
		const marketplaceItem = {
			meta: {
				...item.meta,
			},
			type: item.meta.id.split(".")[1],
			packageItems: exportedItems.map((item) => item.meta.id),
			package: pkg,
		}

		result.push(marketplaceItem)
	}

	return result
}
