import fs from "node:fs/promises"

/**
 * @typedef {Object} LanguageTagFromRegistry
 * @property {string} Type - The type of language.
 * @property {string} Subtag - The language subtag.
 * @property {string} Description - The description of the language.
 * @property {string} Added - The date when the language was added.
 */

async function main() {
	const response = await fetch(
		"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry",
	)
	const tags = parseTags(await response.text())
		// filter most language tags to only include a subset for now and avoid performance and space issues
		.filter((tag) => tag.Subtag.length <= 2)

	const languageSubtags = tags.filter((tag) => tag.Type === "language").map((tag) => tag.Subtag)

	await fs.writeFile(
		"./src/registry.ts",
		`
		//! This file is automatically generated from the IANA tag registry.
		//! Do not edit this file manually.

		/**
		 * A list possible language tags (combinations).
		 * 
		 * This list is automatically generated from the IANA language tag registry.
		 * @see https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
		 * 
		 * For now, this list only includes languages, not scripts or regions. 
		 */
		export const languageTags = ${JSON.stringify(languageSubtags, undefined, 2)} as const
		
		/**
		 * A regular expression that matches any language tag.
		 * 
		 * This list is automatically generated from the IANA language tag registry.
		 * 
		 * For now, this list only includes languages, not scripts or regions. 
		 */
		export const languageTagRegex = "${languageSubtags.join("|")}"

		`,
	)
}

await main()

/**
 * Parses a language tag file and extracts language information including subtag, description, and added date.
 *
 * @param {string} file - The content of the language tag file.
 * @returns {Array<LanguageTagFromRegistry>} An array of language objects with subtag, description, and added date.
 */
function parseTags(file) {
	const lines = file.split("\n")
	const result = []
	let currentItem = null

	for (const line of lines) {
		const trimmedLine = line.trim()

		if (trimmedLine.startsWith("File-Date:") || trimmedLine === "%%") {
			continue
		} else if (trimmedLine.startsWith("Type: language")) {
			if (currentItem !== null) {
				result.push(currentItem)
			}
			currentItem = { Type: "language", Subtag: "", Description: "", Added: "" }
		} else if (trimmedLine.startsWith("Subtag:")) {
			if (currentItem) {
				currentItem.Subtag = trimmedLine.slice(8).trim()
			}
		} else if (trimmedLine.startsWith("Description:")) {
			if (currentItem) {
				currentItem.Description = trimmedLine.slice(12).trim()
			}
		} else if (trimmedLine.startsWith("Added:") && currentItem) {
			currentItem.Added = trimmedLine.slice(7).trim()
		}
	}

	if (currentItem !== null) {
		result.push(currentItem)
	}

	return result
}
